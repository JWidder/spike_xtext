/*
 * generated by Xtext 2.25.0
 */
grammar InternalRayTracerModel;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.raytracer.rtdsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.raytracer.rtdsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.raytracer.rtdsl.services.RayTracerModelGrammarAccess;

}
@parser::members {
	private RayTracerModelGrammarAccess grammarAccess;

	public void setGrammarAccess(RayTracerModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBox
entryRuleBox
:
{ before(grammarAccess.getBoxRule()); }
	 ruleBox
{ after(grammarAccess.getBoxRule()); } 
	 EOF 
;

// Rule Box
ruleBox 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoxAccess().getGroup()); }
		(rule__Box__Group__0)
		{ after(grammarAccess.getBoxAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSphere
entryRuleSphere
:
{ before(grammarAccess.getSphereRule()); }
	 ruleSphere
{ after(grammarAccess.getSphereRule()); } 
	 EOF 
;

// Rule Sphere
ruleSphere 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSphereAccess().getGroup()); }
		(rule__Sphere__Group__0)
		{ after(grammarAccess.getSphereAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCamera
entryRuleCamera
:
{ before(grammarAccess.getCameraRule()); }
	 ruleCamera
{ after(grammarAccess.getCameraRule()); } 
	 EOF 
;

// Rule Camera
ruleCamera 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCameraAccess().getGroup()); }
		(rule__Camera__Group__0)
		{ after(grammarAccess.getCameraAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementBoxParserRuleCall_2_0_0()); }
		ruleBox
		{ after(grammarAccess.getModelAccess().getElementBoxParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getElementSphereParserRuleCall_2_0_1()); }
		ruleSphere
		{ after(grammarAccess.getModelAccess().getElementSphereParserRuleCall_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getElementCameraParserRuleCall_2_0_2()); }
		ruleCamera
		{ after(grammarAccess.getModelAccess().getElementCameraParserRuleCall_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelKeyword_0()); }
	'model'
	{ after(grammarAccess.getModelAccess().getModelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
	(rule__Model__NameAssignment_1)
	{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementAssignment_2()); }
	(rule__Model__ElementAssignment_2)*
	{ after(grammarAccess.getModelAccess().getElementAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Box__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Box__Group__0__Impl
	rule__Box__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoxAccess().getBoxKeyword_0()); }
	'box'
	{ after(grammarAccess.getBoxAccess().getBoxKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Box__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoxAccess().getNameAssignment_1()); }
	(rule__Box__NameAssignment_1)
	{ after(grammarAccess.getBoxAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sphere__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sphere__Group__0__Impl
	rule__Sphere__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sphere__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSphereAccess().getSphereKeyword_0()); }
	'sphere'
	{ after(grammarAccess.getSphereAccess().getSphereKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sphere__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sphere__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sphere__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSphereAccess().getNameAssignment_1()); }
	(rule__Sphere__NameAssignment_1)
	{ after(grammarAccess.getSphereAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Camera__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Camera__Group__0__Impl
	rule__Camera__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Camera__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCameraAccess().getCameraKeyword_0()); }
	'camera'
	{ after(grammarAccess.getCameraAccess().getCameraKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Camera__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Camera__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Camera__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCameraAccess().getNameAssignment_1()); }
	(rule__Camera__NameAssignment_1)
	{ after(grammarAccess.getCameraAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ElementAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementAlternatives_2_0()); }
		(rule__Model__ElementAlternatives_2_0)
		{ after(grammarAccess.getModelAccess().getElementAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoxAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getBoxAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sphere__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSphereAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSphereAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Camera__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCameraAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCameraAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
