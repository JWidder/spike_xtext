/*
 * generated by Xtext 2.25.0
 */
package de.raytracer.rtdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.raytracer.rtdsl.ide.contentassist.antlr.internal.InternalRayTracerModelParser;
import de.raytracer.rtdsl.services.RayTracerModelGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RayTracerModelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RayTracerModelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RayTracerModelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getElementAlternatives_2_0(), "rule__Model__ElementAlternatives_2_0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getBoxAccess().getGroup(), "rule__Box__Group__0");
			builder.put(grammarAccess.getSphereAccess().getGroup(), "rule__Sphere__Group__0");
			builder.put(grammarAccess.getCameraAccess().getGroup(), "rule__Camera__Group__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
			builder.put(grammarAccess.getModelAccess().getElementAssignment_2(), "rule__Model__ElementAssignment_2");
			builder.put(grammarAccess.getBoxAccess().getNameAssignment_1(), "rule__Box__NameAssignment_1");
			builder.put(grammarAccess.getSphereAccess().getNameAssignment_1(), "rule__Sphere__NameAssignment_1");
			builder.put(grammarAccess.getCameraAccess().getNameAssignment_1(), "rule__Camera__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RayTracerModelGrammarAccess grammarAccess;

	@Override
	protected InternalRayTracerModelParser createParser() {
		InternalRayTracerModelParser result = new InternalRayTracerModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RayTracerModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RayTracerModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
