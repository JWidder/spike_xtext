/*
 * generated by Xtext 2.25.0
 */
package de.raytracer.rtdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RayTracerModelGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.raytracer.rtdsl.RayTracerModel.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cElementAlternatives_2_0 = (Alternatives)cElementAssignment_2.eContents().get(0);
		private final RuleCall cElementBoxParserRuleCall_2_0_0 = (RuleCall)cElementAlternatives_2_0.eContents().get(0);
		private final RuleCall cElementSphereParserRuleCall_2_0_1 = (RuleCall)cElementAlternatives_2_0.eContents().get(1);
		private final RuleCall cElementCameraParserRuleCall_2_0_2 = (RuleCall)cElementAlternatives_2_0.eContents().get(2);
		
		//Model:
		//    'model' name=ID
		//    element += (Box|Sphere|Camera)*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID
		//element += (Box|Sphere|Camera)*
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//element += (Box|Sphere|Camera)*
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//(Box|Sphere|Camera)
		public Alternatives getElementAlternatives_2_0() { return cElementAlternatives_2_0; }
		
		//Box
		public RuleCall getElementBoxParserRuleCall_2_0_0() { return cElementBoxParserRuleCall_2_0_0; }
		
		//Sphere
		public RuleCall getElementSphereParserRuleCall_2_0_1() { return cElementSphereParserRuleCall_2_0_1; }
		
		//Camera
		public RuleCall getElementCameraParserRuleCall_2_0_2() { return cElementCameraParserRuleCall_2_0_2; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.raytracer.rtdsl.RayTracerModel.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Box:
		//    'box' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'box' name=ID
		public Group getGroup() { return cGroup; }
		
		//'box'
		public Keyword getBoxKeyword_0() { return cBoxKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.raytracer.rtdsl.RayTracerModel.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSphereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Sphere:
		//    'sphere' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sphere' name=ID
		public Group getGroup() { return cGroup; }
		
		//'sphere'
		public Keyword getSphereKeyword_0() { return cSphereKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CameraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.raytracer.rtdsl.RayTracerModel.Camera");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCameraKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Camera:
		//    'camera' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'camera' name=ID
		public Group getGroup() { return cGroup; }
		
		//'camera'
		public Keyword getCameraKeyword_0() { return cCameraKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final BoxElements pBox;
	private final SphereElements pSphere;
	private final CameraElements pCamera;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RayTracerModelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pBox = new BoxElements();
		this.pSphere = new SphereElements();
		this.pCamera = new CameraElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.raytracer.rtdsl.RayTracerModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'model' name=ID
	//    element += (Box|Sphere|Camera)*
	//    ;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Box:
	//    'box' name=ID
	//;
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Sphere:
	//    'sphere' name=ID
	//;
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//Camera:
	//    'camera' name=ID
	//;
	public CameraElements getCameraAccess() {
		return pCamera;
	}
	
	public ParserRule getCameraRule() {
		return getCameraAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
