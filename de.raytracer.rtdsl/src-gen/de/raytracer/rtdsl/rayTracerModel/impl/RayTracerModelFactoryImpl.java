/**
 * generated by Xtext 2.25.0
 */
package de.raytracer.rtdsl.rayTracerModel.impl;

import de.raytracer.rtdsl.rayTracerModel.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RayTracerModelFactoryImpl extends EFactoryImpl implements RayTracerModelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RayTracerModelFactory init()
  {
    try
    {
      RayTracerModelFactory theRayTracerModelFactory = (RayTracerModelFactory)EPackage.Registry.INSTANCE.getEFactory(RayTracerModelPackage.eNS_URI);
      if (theRayTracerModelFactory != null)
      {
        return theRayTracerModelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RayTracerModelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RayTracerModelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RayTracerModelPackage.MODEL: return createModel();
      case RayTracerModelPackage.BOX: return createBox();
      case RayTracerModelPackage.SPHERE: return createSphere();
      case RayTracerModelPackage.CAMERA: return createCamera();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Box createBox()
  {
    BoxImpl box = new BoxImpl();
    return box;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sphere createSphere()
  {
    SphereImpl sphere = new SphereImpl();
    return sphere;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Camera createCamera()
  {
    CameraImpl camera = new CameraImpl();
    return camera;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RayTracerModelPackage getRayTracerModelPackage()
  {
    return (RayTracerModelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RayTracerModelPackage getPackage()
  {
    return RayTracerModelPackage.eINSTANCE;
  }

} //RayTracerModelFactoryImpl
